{"version":3,"sources":["components/Pixel.js","components/Row.js","functions/index.js","components/SvgImage.js","components/Button.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["Pixel","color","pixelStyle","backgroundColor","className","style","Row","rowStyle","background","row","backgroundString","i","length","slice","generateBackgroundString","fib","num","temp","a","b","renderSvg","array","svgString","forEach","rows","y","x","window","btoa","convertSvgStringToBase64","SvgImage","calculatedArray","backgroundImage","Button","selectedCondition","selectedText","onClick","title","Controls","modifier","setModifier","method","setMethod","fullScreen","setFullScreen","generateNewImage","useState","menuOpen","setMenuOpen","type","value","min","max","onChange","e","target","maxLength","size","App","setCalculatedArray","colorArray","colors","r","g","push","generateAllColors","useEffect","colorArrayChunked","result","arrayCopy","splice","chunkArray","number","startArr","patternedArray","flat","generatePattern","filter","gradient","div","svg","true","false","map","index","key","arrChunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da120066.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Pixel = ({ color }) => {\n  let pixelStyle = {\n    backgroundColor: `rgb(${color[0]},${color[1]},${color[2]})`,\n  };\n\n  return <div className=\"Pixel\" style={pixelStyle}></div>;\n};\n\nexport default Pixel;\n","import React from \"react\";\n\nconst Row = ({ row }) => {\n  function generateBackgroundString(row) {\n    let backgroundString = `linear-gradient(90deg, `;\n    for (let i = 0; i < row.length; i++) {\n      backgroundString += `rgb(${row[i][0]},${row[i][1]},${row[i][2]}) ${\n        (i / row.length) * 100\n      }%,`;\n      backgroundString += `rgb(${row[i][0]},${row[i][1]},${row[i][2]}) ${\n        ((i + 1) / row.length) * 100\n      }%,`;\n    }\n    backgroundString = backgroundString.slice(0, -1); // Remove last comma\n    backgroundString += `)`;\n\n    return backgroundString;\n  }\n\n  let rowStyle = {\n    background: generateBackgroundString(row),\n  };\n\n  return <div className=\"Row\" style={rowStyle} />;\n};\n\nexport default Row;\n","// Generate all 32,768 colors\nexport const generateAllColors = () => {\n  let colors = [];\n\n  // 0 -> 255 for rgb(r,g,b);\n  for (let r = 8 - 1; r <= 256 - 1; r += 8) {\n    for (let g = 8 - 1; g <= 256 - 1; g += 8) {\n      for (let b = 8 - 1; b <= 256 - 1; b += 8) {\n        colors.push([r, g, b]);\n      }\n    }\n  }\n  return colors;\n};\n\n// Using a very large array causes the following console error when using .map ðŸ’©: Uncaught RangeError: Maximum call stack size exceeded\n// Chunking the array resolves the issue\nexport function chunkArray(array, size) {\n  let result = [];\n  let arrayCopy = [...array];\n  while (arrayCopy.length > 0) {\n    result.push(arrayCopy.splice(0, size));\n  }\n  return result;\n}\n\n// Fibonacci sequence used to make the colors resemble something\nexport function fib(num) {\n  var a = 0;\n  var b = 1;\n  var temp;\n\n  while (num > 0) {\n    temp = b;\n    b = b + a;\n    a = temp;\n    num--;\n  }\n  return a;\n}\n\n// Transforms color palette into an interesting image\nexport function generatePattern(array, number) {\n  let startArr = array;\n  let modifier = number;\n  let patternedArray = [];\n\n  while (array.length > 0) {\n    for (let i = 1; i <= modifier; i += 1) {\n      patternedArray.push(startArr.splice(-fib(i), 1).flat(1));\n    }\n    for (let i = modifier; i > 0; i -= 1) {\n      patternedArray.push(startArr.splice(-fib(i), 1).flat(1));\n    }\n\n    // Fibonacci seems to work well to produce a nice image, but can try playing around with different algorithms above to splice startArr\n  }\n  return patternedArray;\n}\n\n// Creates SVG image\n// Tried first leaving SVG as DOM element and had same performance as DIV method\n// Converting to Base64 improved performance\nexport function renderSvg(array) {\n  if (array.length === 0) {\n    return false;\n  }\n\n  let svgString = `<svg width=\"256\" height=\"128\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"128\" fill=\"\" /><g id=\"\">`;\n\n  array.forEach((rows, y) => {\n    rows.forEach((color, x) => {\n      svgString += `<rect x=\"${x}\" y=\"${y}\" width=\"1\" height=\"1\" fill=\"${`rgb(${color[0]},${color[1]},${color[2]})`}\"/>`;\n    });\n  });\n  svgString += `</g></svg>`;\n\n  const svgDataUrl = convertSvgStringToBase64(svgString);\n  return svgDataUrl;\n}\n\nfunction convertSvgStringToBase64(svgString) {\n  return \"data:image/svg+xml;base64,\" + window.btoa(svgString);\n}\n\n// // Converting to hex causes slow down when generating image\n// function numberToHex(number) {\n//   let hexValue = number.toString(16);\n//   if (hexValue.length === 1) {\n//     hexValue = `0${hexValue}`;\n//   }\n//   return hexValue;\n// }\n","import React from \"react\";\nimport { renderSvg } from \"../functions\";\n\nconst SvgImage = ({ calculatedArray }) => {\n  let style = {\n    backgroundImage: `url(\"${renderSvg(calculatedArray)}\")`,\n  };\n\n  return <div className=\"SvgBackground\" style={style}></div>;\n};\n\nexport default SvgImage;\n","import React from \"react\";\n\nconst Button = ({ selectedCondition, selectedText, onClick, title }) => {\n  return (\n    <button\n      className={`${selectedCondition ? \"selected\" : \"\"}`}\n      onClick={onClick}\n    >\n      {selectedCondition ? selectedText ?? title : title}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport Button from \"./Button\";\n\nconst Controls = ({\n  modifier,\n  setModifier,\n  method,\n  setMethod,\n  fullScreen,\n  setFullScreen,\n  generateNewImage,\n}) => {\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  const handleModifierValueInputChange = (e) => {\n    if (e.target.value > 99) {\n      setModifier(99);\n    } else if (e.target.value < 1) {\n      setModifier(1);\n    } else {\n      setModifier(e.target.value);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"ControlsMenuButton\">\n        <Button\n          title={\"Options\"}\n          selectedCondition={menuOpen}\n          selectedText={\"Close\"}\n          onClick={() => setMenuOpen(!menuOpen)}\n        />\n      </div>\n      <div className={`Controls ${menuOpen ? \"show\" : \"hide\"}`}>\n        <div>\n          <h3>Modifier (1-99):</h3>\n          <input\n            type=\"number\"\n            value={modifier}\n            min=\"1\"\n            max=\"99\"\n            onChange={handleModifierValueInputChange}\n            maxLength=\"2\"\n            size=\"3\"\n          ></input>\n        </div>\n\n        <div>\n          <h3>Method:</h3>\n          <Button\n            title={\"CSS Gradient\"}\n            selectedCondition={method === \"gradient\"}\n            onClick={() => setMethod(\"gradient\")}\n          />\n          <Button\n            title={\"Div Elements\"}\n            selectedCondition={method === \"div\"}\n            onClick={() => setMethod(\"div\")}\n          />\n          <Button\n            title={\"SVG Base64\"}\n            selectedCondition={method === \"svg\"}\n            onClick={() => setMethod(\"svg\")}\n          />\n        </div>\n\n        <div>\n          <h3>Full Screen:</h3>\n          <Button\n            title={\"Enable\"}\n            selectedCondition={fullScreen}\n            onClick={() => setFullScreen(true)}\n          />\n          <Button\n            title={\"Disable\"}\n            selectedCondition={!fullScreen}\n            onClick={() => setFullScreen(false)}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Controls;\n","import React, { useState, useEffect } from \"react\";\nimport Pixel from \"./components/Pixel\";\nimport Row from \"./components/Row\";\nimport SvgImage from \"./components/SvgImage\";\nimport Controls from \"./components/Controls\";\nimport { chunkArray, generatePattern, generateAllColors } from \"./functions\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [modifier, setModifier] = useState(32);\n  const [calculatedArray, setCalculatedArray] = useState([]);\n  const [method, setMethod] = useState(\"gradient\");\n  const [fullScreen, setFullScreen] = useState(true);\n\n  const colorArray = generateAllColors();\n\n  useEffect(() => {\n    generateNewImage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [modifier]);\n\n  const generateNewImage = (e) => {\n    let colorArrayPatterned = generatePattern(colorArray, modifier).filter(\n      (e) => e.length\n    );\n    let colorArrayChunked = chunkArray(colorArrayPatterned, 256);\n\n    setCalculatedArray(colorArrayChunked);\n  };\n\n  return (\n    <div className=\"App\">\n      <Controls\n        modifier={modifier}\n        setModifier={setModifier}\n        method={method}\n        setMethod={setMethod}\n        fullScreen={fullScreen}\n        setFullScreen={setFullScreen}\n      />\n      <div\n        className={`Image ${\n          {\n            gradient: `GradientMethod`,\n            div: `DivMethod`,\n            svg: `SvgMethod`,\n          }[method]\n        } ${\n          {\n            true: `FullScreen`,\n            false: `OriginalSize`,\n          }[fullScreen]\n        }`}\n      >\n        {/* CSS Gradient method - best performance but has anti aliasing/blur issue on Chrome-based browsers */}\n        {method === \"gradient\" &&\n          calculatedArray &&\n          calculatedArray.map((row, index) => <Row row={row} key={index} />)}\n\n        {/* DIV method - causes performance issues - too many DOM elements */}\n        {method === \"div\" &&\n          calculatedArray &&\n          calculatedArray.map((arrChunk) =>\n            arrChunk.map((color, index) => <Pixel color={color} key={index} />)\n          )}\n\n        {/* SVG Base64 method - good performance, able to use CSS transitions in Chrome-based browsers */}\n        {method === \"svg\" && calculatedArray && (\n          <SvgImage calculatedArray={calculatedArray} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}